/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface TimeAllyManagerInterface extends ethers.utils.Interface {
  functions: {
    'adminMode()': FunctionFragment;
    'deactivateAdminMode()': FunctionFragment;
    'defaultMonths()': FunctionFragment;
    'deployer()': FunctionFragment;
    'destroyStaking(uint256,uint256,address)': FunctionFragment;
    'emitStakingMerge(address)': FunctionFragment;
    'emitStakingTransfer(address,address)': FunctionFragment;
    'getTimeAllyMonthlyNRT(uint256)': FunctionFragment;
    'getTotalActiveStaking(uint256)': FunctionFragment;
    'increaseActiveStaking(uint256,uint256,uint256)': FunctionFragment;
    'isStakingContractValid(address)': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'prepaidEs()': FunctionFragment;
    'prepaidFallback(address,uint256)': FunctionFragment;
    'processNrtReward(uint256,uint8)': FunctionFragment;
    'receiveNrt()': FunctionFragment;
    'sendStake(address,uint256,bool[])': FunctionFragment;
    'setInitialValues(address,address,address,address)': FunctionFragment;
    'splitStaking(address,uint256,uint256)': FunctionFragment;
    'stake()': FunctionFragment;
    'stakingTarget()': FunctionFragment;
    'validatorManager()': FunctionFragment;
    'withdrawClaimedNrt(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'adminMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deactivateAdminMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultMonths', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deployer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'destroyStaking',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'emitStakingMerge', values: [string]): string;
  encodeFunctionData(functionFragment: 'emitStakingTransfer', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getTimeAllyMonthlyNRT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTotalActiveStaking', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'increaseActiveStaking',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isStakingContractValid', values: [string]): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'prepaidEs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'prepaidFallback', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'processNrtReward',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'receiveNrt', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sendStake',
    values: [string, BigNumberish, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setInitialValues',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'splitStaking',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'stake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingTarget', values?: undefined): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawClaimedNrt', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'adminMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactivateAdminMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultMonths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'destroyStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitStakingMerge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitStakingTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimeAllyMonthlyNRT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalActiveStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseActiveStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStakingContractValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepaidEs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepaidFallback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'processNrtReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveNrt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splitStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawClaimedNrt', data: BytesLike): Result;

  events: {
    'StakingMerge(address,address)': EventFragment;
    'StakingSplit(address,address)': EventFragment;
    'StakingTransfer(address,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'StakingMerge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingSplit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingTransfer'): EventFragment;
}

export class TimeAllyManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimeAllyManagerInterface;

  functions: {
    adminMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deactivateAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

    defaultMonths(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    destroyStaking(
      _amount: BigNumberish,
      _endMonth: BigNumberish,
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emitStakingMerge(_childStaking: string, overrides?: Overrides): Promise<ContractTransaction>;

    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTimeAllyMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    receiveNrt(overrides?: PayableOverrides): Promise<ContractTransaction>;

    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      _prepaidEs: string,
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    stake(overrides?: PayableOverrides): Promise<ContractTransaction>;

    stakingTarget(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  adminMode(overrides?: CallOverrides): Promise<boolean>;

  deactivateAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

  defaultMonths(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  destroyStaking(
    _amount: BigNumberish,
    _endMonth: BigNumberish,
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emitStakingMerge(_childStaking: string, overrides?: Overrides): Promise<ContractTransaction>;

  emitStakingTransfer(
    _oldOwner: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  increaseActiveStaking(
    _amount: BigNumberish,
    _startMonth: BigNumberish,
    _endMonth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<boolean>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  prepaidFallback(
    _sender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processNrtReward(
    _reward: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  receiveNrt(overrides?: PayableOverrides): Promise<ContractTransaction>;

  sendStake(
    _receiver: string,
    _initialIssTime: BigNumberish,
    _claimedMonths: boolean[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setInitialValues(
    _nrtAddress: string,
    _validatorManager: string,
    _prepaidEs: string,
    _stakingTarget: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  splitStaking(
    _owner: string,
    _initialIssTime: BigNumberish,
    _masterEndMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  stake(overrides?: PayableOverrides): Promise<ContractTransaction>;

  stakingTarget(overrides?: CallOverrides): Promise<string>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  withdrawClaimedNrt(
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    adminMode(overrides?: CallOverrides): Promise<boolean>;

    deactivateAdminMode(overrides?: CallOverrides): Promise<void>;

    defaultMonths(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    destroyStaking(
      _amount: BigNumberish,
      _endMonth: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitStakingMerge(_childStaking: string, overrides?: CallOverrides): Promise<void>;

    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<boolean>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveNrt(overrides?: CallOverrides): Promise<void>;

    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      _prepaidEs: string,
      _stakingTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    stakingTarget(overrides?: CallOverrides): Promise<string>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    withdrawClaimedNrt(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    StakingMerge(master: string | null, child: string | null): EventFilter;

    StakingSplit(master: string | null, child: string | null): EventFilter;

    StakingTransfer(from: string | null, to: string | null, staking: string | null): EventFilter;
  };

  estimateGas: {
    adminMode(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateAdminMode(overrides?: Overrides): Promise<BigNumber>;

    defaultMonths(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    destroyStaking(
      _amount: BigNumberish,
      _endMonth: BigNumberish,
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emitStakingMerge(_childStaking: string, overrides?: Overrides): Promise<BigNumber>;

    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    receiveNrt(overrides?: PayableOverrides): Promise<BigNumber>;

    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      _prepaidEs: string,
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    stake(overrides?: PayableOverrides): Promise<BigNumber>;

    stakingTarget(overrides?: CallOverrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawClaimedNrt(_amount: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateAdminMode(overrides?: Overrides): Promise<PopulatedTransaction>;

    defaultMonths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroyStaking(
      _amount: BigNumberish,
      _endMonth: BigNumberish,
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emitStakingMerge(_childStaking: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTimeAllyMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    receiveNrt(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      _prepaidEs: string,
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    stake(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    stakingTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
