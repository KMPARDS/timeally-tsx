/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ValidatorManagerInterface extends ethers.utils.Interface {
  functions: {
    'blockRewardContract()': FunctionFragment;
    'deployer()': FunctionFragment;
    'getAdjustedAmount(uint256,uint256,uint256)': FunctionFragment;
    'getBlockRewardsMonthlyNRT(uint256)': FunctionFragment;
    'getDelegatorByAddress(uint256,address,address)': FunctionFragment;
    'getDelegatorByIndex(uint256,uint256,uint256)': FunctionFragment;
    'getDelegatorIndex(uint256,uint256,address)': FunctionFragment;
    'getLuckyValidatorAddress()': FunctionFragment;
    'getTotalAdjustedStakings(uint256)': FunctionFragment;
    'getTotalBlocksSealed(uint256)': FunctionFragment;
    'getValidatorByAddress(uint256,address)': FunctionFragment;
    'getValidatorByIndex(uint256,uint256)': FunctionFragment;
    'getValidatorEarning(uint256,address)': FunctionFragment;
    'getValidatorIndex(uint256,address)': FunctionFragment;
    'getValidators(uint256)': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'pickValidator(uint256,uint256)': FunctionFragment;
    'randomnessManager()': FunctionFragment;
    'receiveNrt()': FunctionFragment;
    'registerBlock(address)': FunctionFragment;
    'registerDelegation(uint256,bytes)': FunctionFragment;
    'setCommission(uint256,uint256)': FunctionFragment;
    'setInitialValues(address,address,address,address,address)': FunctionFragment;
    'timeally()': FunctionFragment;
    'validatorSet()': FunctionFragment;
    'withdrawCommission(uint256)': FunctionFragment;
    'withdrawDelegationShare(uint256,address,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'blockRewardContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deployer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAdjustedAmount',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getBlockRewardsMonthlyNRT', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getDelegatorByAddress',
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getDelegatorByIndex',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getDelegatorIndex',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'getLuckyValidatorAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalAdjustedStakings', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTotalBlocksSealed', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getValidatorByAddress',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getValidatorByIndex',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getValidatorEarning',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'getValidatorIndex', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getValidators', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pickValidator',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'randomnessManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiveNrt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registerBlock', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'registerDelegation',
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCommission',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setInitialValues',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'timeally', values?: undefined): string;
  encodeFunctionData(functionFragment: 'validatorSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawCommission', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdrawDelegationShare',
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: 'blockRewardContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAdjustedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockRewardsMonthlyNRT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelegatorByAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelegatorByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelegatorIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLuckyValidatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalAdjustedStakings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBlocksSealed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorByAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorEarning', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pickValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'randomnessManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveNrt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerDelegation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCommission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeally', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCommission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawDelegationShare', data: BytesLike): Result;

  events: {};
}

export class ValidatorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorManagerInterface;

  functions: {
    /**
     * Address of block reward smart contract.
     */
    blockRewardContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets total block rewards NRT in the month.
     * @param _month : NRT Month.
     */
    getBlockRewardsMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[];
    }>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Randomness Manager contract reference.
     */
    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    receiveNrt(overrides?: PayableOverrides): Promise<ContractTransaction>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeally(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Address of validator set smart contract.
     */
    validatorSet(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(_month: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Address of block reward smart contract.
   */
  blockRewardContract(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets quadratic adjustment amount for a given amount.
   * @param _amount : Initial amount.
   * @param _base : Amount intervals in which adjustment rate should increase.
   * @param _premiumFactor : Factor in which premium increases.
   */
  getAdjustedAmount(
    _amount: BigNumberish,
    _base: BigNumberish,
    _premiumFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets total block rewards NRT in the month.
   * @param _month : NRT Month.
   */
  getBlockRewardsMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get delegator by addresses.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of the delegating contract.
   * @param _validator : Address of the validator.
   */
  getDelegatorByAddress(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  /**
   * Gets delegator by validator and delegator index.
   * @param _delegatorIndex : Index of delegator in array.
   * @param _month : NRT Month.
   * @param _validatorIndex : Index of validator in array.
   */
  getDelegatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _delegatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  /**
   * Gets delegator index.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of delegatinng staking contract.
   * @param _validatorIndex : Index of the validator.
   */
  getDelegatorIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets address of a lucky vaidator based on PoS.
   */
  getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Gets total adjusted stakings for the month.
   * @param _month : NRT Month.
   */
  getTotalAdjustedStakings(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets total blocks sealed in the month.
   * @param _month : NRT Month.
   */
  getTotalBlocksSealed(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets validator by month and address
   * @param _month : NRT Month.
   * @param _validator : Address of validator.
   */
  getValidatorByAddress(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  /**
   * Gets validator by month and index.
   * @param _month : NRT Month.
   * @param _validatorIndex : Index of the validator in array.
   */
  getValidatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  /**
   * Can be called after NRT is released.
   * Gets earnings of a validator based on blocks sealed in previous months.
   * @param _month : NRT Month.
   * @param _validator : Address of validator.
   */
  getValidatorEarning(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets validator index.
   * @param _month : NRT Month.
   * @param _validator : Address of the validator.
   */
  getValidatorIndex(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets all validators for the month.
   * @param _month : NRT Month.
   */
  getValidators(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }[]
  >;

  /**
   * NRT Manager contract reference.
   */
  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Picks a validator index based on PoS.
   * @param _month : NRT Month.
   * @param _seed : Pseudo random seed.
   */
  pickValidator(
    _month: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Randomness Manager contract reference.
   */
  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows NRT Manager contract to send NRT share for Validator Manager.
   */
  receiveNrt(overrides?: PayableOverrides): Promise<ContractTransaction>;

  /**
   * Allows block reward contract to register a sealed block by validator.
   * @param _sealer : Address of validator who sealed the block.
   */
  registerBlock(_sealer: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows a TimeAlly staking to register a delegation.
   * @param _extraData : Address of validator to delegate.
   * @param _month : NRT Month.
   */
  registerDelegation(
    _month: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows a validator to set commission.
   * @param _month : NRT month.
   * @param _perThousandCommission : Per thousand commission of validator.
   */
  setCommission(
    _month: BigNumberish,
    _perThousandCommission: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(
    _validatorSet: string,
    _nrtManager: string,
    _timeally: string,
    _randomnessManager: string,
    _blockRewardContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * TimeAlly Manager contract reference.
   */
  timeally(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of validator set smart contract.
   */
  validatorSet(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows a validator to withdraw their commission.
   * @param _month : NRT Month.
   */
  withdrawCommission(_month: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows staking owners to withdraw share from validators earnings.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of staking contract which has delegated.
   * @param _validator : Address of validator.
   */
  withdrawDelegationShare(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Address of block reward smart contract.
     */
    blockRewardContract(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total block rewards NRT in the month.
     * @param _month : NRT Month.
     */
    getBlockRewardsMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[]
    >;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Randomness Manager contract reference.
     */
    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    receiveNrt(overrides?: CallOverrides): Promise<void>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeally(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of validator set smart contract.
     */
    validatorSet(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(_month: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Address of block reward smart contract.
     */
    blockRewardContract(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total block rewards NRT in the month.
     * @param _month : NRT Month.
     */
    getBlockRewardsMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Randomness Manager contract reference.
     */
    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    receiveNrt(overrides?: PayableOverrides): Promise<BigNumber>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeally(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of validator set smart contract.
     */
    validatorSet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(_month: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Address of block reward smart contract.
     */
    blockRewardContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets total block rewards NRT in the month.
     * @param _month : NRT Month.
     */
    getBlockRewardsMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(_month: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Randomness Manager contract reference.
     */
    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    receiveNrt(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeally(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address of validator set smart contract.
     */
    validatorSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(_month: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
