/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ITimeAllyStakingInterface extends ethers.utils.Interface {
  functions: {
    'principal()': FunctionFragment;
    'startMonth()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'principal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startMonth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'principal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startMonth', data: BytesLike): Result;

  events: {};
}

export class ITimeAllyStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITimeAllyStakingInterface;

  functions: {
    principal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'principal()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    startMonth(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'startMonth()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  principal(overrides?: CallOverrides): Promise<BigNumber>;

  'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

  startMonth(overrides?: CallOverrides): Promise<number>;

  'startMonth()'(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    principal(overrides?: CallOverrides): Promise<BigNumber>;

    'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

    startMonth(overrides?: CallOverrides): Promise<number>;

    'startMonth()'(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    principal(overrides?: CallOverrides): Promise<BigNumber>;

    'principal()'(overrides?: CallOverrides): Promise<BigNumber>;

    startMonth(overrides?: CallOverrides): Promise<BigNumber>;

    'startMonth()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    principal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'principal()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'startMonth()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
