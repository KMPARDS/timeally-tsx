/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface MultiSigWalletInterface extends ethers.utils.Interface {
  functions: {
    'MAX_OWNER_COUNT()': FunctionFragment;
    'addNominee(address,uint8)': FunctionFragment;
    'appointee()': FunctionFragment;
    'changeMultiplier(address,uint8)': FunctionFragment;
    'changeOwnerToDeceased()': FunctionFragment;
    'changeRequirement(uint8)': FunctionFragment;
    'confirmTransaction(uint256)': FunctionFragment;
    'confirmations(uint256,address)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'executeTransaction(uint256)': FunctionFragment;
    'getConfirmationCount(uint256)': FunctionFragment;
    'getConfirmations(uint256)': FunctionFragment;
    'getContractAddress()': FunctionFragment;
    'getNominees()': FunctionFragment;
    'getTransactionCount(bool,bool)': FunctionFragment;
    'getTransactionIds(uint256,uint256,bool,bool)': FunctionFragment;
    'grantPermission(uint256,uint256)': FunctionFragment;
    'isConfirmed(uint256)': FunctionFragment;
    'isGrantedPermission()': FunctionFragment;
    'isNominee(address)': FunctionFragment;
    'isOwnerDeceased()': FunctionFragment;
    'nomineeMode()': FunctionFragment;
    'nominees(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingConfirmations(uint256,address)': FunctionFragment;
    'rejectTransaction(uint256)': FunctionFragment;
    'removeNominee(address)': FunctionFragment;
    'replaceNominee(address,address)': FunctionFragment;
    'required()': FunctionFragment;
    'requiredP()': FunctionFragment;
    'revokeConfirmation(uint256)': FunctionFragment;
    'submitTransaction(address,uint256,bytes)': FunctionFragment;
    'switchNomineeMode(uint256)': FunctionFragment;
    'totalVotes()': FunctionFragment;
    'transactionCount()': FunctionFragment;
    'transactions(uint256)': FunctionFragment;
    'transferOwnership(address,address)': FunctionFragment;
    'voteMultiplier(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'MAX_OWNER_COUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addNominee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'appointee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeMultiplier', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'changeOwnerToDeceased', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeRequirement', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'confirmTransaction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'confirmations', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'executeTransaction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getConfirmationCount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getConfirmations', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getContractAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNominees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTransactionCount', values: [boolean, boolean]): string;
  encodeFunctionData(
    functionFragment: 'getTransactionIds',
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantPermission',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isConfirmed', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isGrantedPermission', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isNominee', values: [string]): string;
  encodeFunctionData(functionFragment: 'isOwnerDeceased', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nomineeMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nominees', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingConfirmations',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'rejectTransaction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeNominee', values: [string]): string;
  encodeFunctionData(functionFragment: 'replaceNominee', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'required', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requiredP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeConfirmation', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'submitTransaction',
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'switchNomineeMode', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalVotes', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transactionCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transactions', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'voteMultiplier', values: [string]): string;

  decodeFunctionResult(functionFragment: 'MAX_OWNER_COUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addNominee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appointee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOwnerToDeceased', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRequirement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfirmationCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfirmations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNominees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTransactionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTransactionIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantPermission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isConfirmed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGrantedPermission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isNominee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwnerDeceased', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nomineeMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingConfirmations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rejectTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeNominee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'replaceNominee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'required', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requiredP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeConfirmation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'switchNomineeMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transactionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transactions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voteMultiplier', data: BytesLike): Result;

  events: {
    'Approval(uint256)': EventFragment;
    'Confirmation(address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Execution(uint256)': EventFragment;
    'ExecutionFailure(uint256)': EventFragment;
    'NomineeAddition(address)': EventFragment;
    'NomineeModeChanged(address,uint256)': EventFragment;
    'NomineeRemoval(address)': EventFragment;
    'OwnershipTransffered(address,address)': EventFragment;
    'PermissionFailed(address,uint256)': EventFragment;
    'PermissionGranted(address,uint256)': EventFragment;
    'RequirementChange(uint8)': EventFragment;
    'Revocation(address,uint256)': EventFragment;
    'Submission(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Confirmation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Execution'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExecutionFailure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NomineeAddition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NomineeModeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NomineeRemoval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransffered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PermissionFailed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PermissionGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequirementChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Revocation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Submission'): EventFragment;
}

export class MultiSigWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiSigWalletInterface;

  functions: {
    MAX_OWNER_COUNT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'MAX_OWNER_COUNT()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addNominee(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'addNominee(address,uint8)'(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    appointee(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'appointee()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    changeMultiplier(
      a: string,
      m: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'changeMultiplier(address,uint8)'(
      a: string,
      m: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeOwnerToDeceased(overrides?: Overrides): Promise<ContractTransaction>;

    'changeOwnerToDeceased()'(overrides?: Overrides): Promise<ContractTransaction>;

    changeRequirement(
      _requiredP: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'changeRequirement(uint8)'(
      _requiredP: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'confirmTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'confirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    depositToken(overrides?: PayableOverrides): Promise<ContractTransaction>;

    'depositToken()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'executeTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    'getConfirmationCount(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _confirmations: string[];
      0: string[];
    }>;

    'getConfirmations(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _confirmations: string[];
      0: string[];
    }>;

    getContractAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getContractAddress()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNominees(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    'getNominees()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    'getTransactionCount(bool,bool)'(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _transactionIds: BigNumber[];
      0: BigNumber[];
    }>;

    'getTransactionIds(uint256,uint256,bool,bool)'(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _transactionIds: BigNumber[];
      0: BigNumber[];
    }>;

    grantPermission(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'grantPermission(uint256,uint256)'(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isConfirmed(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isGrantedPermission(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isGrantedPermission()'(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isNominee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isNominee(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOwnerDeceased(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isOwnerDeceased()'(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nomineeMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'nomineeMode()'(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nominees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'nominees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'owner()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingConfirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'pendingConfirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    rejectTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'rejectTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeNominee(nominee: string, overrides?: Overrides): Promise<ContractTransaction>;

    'removeNominee(address)'(nominee: string, overrides?: Overrides): Promise<ContractTransaction>;

    replaceNominee(
      nominee: string,
      newNominee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'replaceNominee(address,address)'(
      nominee: string,
      newNominee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    required(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'required()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    requiredP(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'requiredP()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'revokeConfirmation(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'submitTransaction(address,uint256,bytes)'(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    switchNomineeMode(t: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'switchNomineeMode(uint256)'(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalVotes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'totalVotes()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transactionCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'transactionCount()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      timestamp: BigNumber;
      data: string;
      executed: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    'transactions(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      timestamp: BigNumber;
      data: string;
      executed: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    transferOwnership(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transferOwnership(address,address)'(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voteMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'voteMultiplier(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  'MAX_OWNER_COUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

  addNominee(
    nominee: string,
    _voteMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'addNominee(address,uint8)'(
    nominee: string,
    _voteMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  appointee(overrides?: CallOverrides): Promise<string>;

  'appointee()'(overrides?: CallOverrides): Promise<string>;

  changeMultiplier(a: string, m: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'changeMultiplier(address,uint8)'(
    a: string,
    m: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeOwnerToDeceased(overrides?: Overrides): Promise<ContractTransaction>;

  'changeOwnerToDeceased()'(overrides?: Overrides): Promise<ContractTransaction>;

  changeRequirement(_requiredP: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'changeRequirement(uint8)'(
    _requiredP: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  confirmTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'confirmTransaction(uint256)'(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  confirmations(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  'confirmations(uint256,address)'(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositToken(overrides?: PayableOverrides): Promise<ContractTransaction>;

  'depositToken()'(overrides?: PayableOverrides): Promise<ContractTransaction>;

  executeTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'executeTransaction(uint256)'(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getConfirmationCount(transactionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getConfirmationCount(uint256)'(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfirmations(transactionId: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  'getConfirmations(uint256)'(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContractAddress(overrides?: CallOverrides): Promise<string>;

  'getContractAddress()'(overrides?: CallOverrides): Promise<string>;

  getNominees(overrides?: CallOverrides): Promise<string[]>;

  'getNominees()'(overrides?: CallOverrides): Promise<string[]>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getTransactionCount(bool,bool)'(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransactionIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  'getTransactionIds(uint256,uint256,bool,bool)'(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantPermission(
    timeNow: BigNumberish,
    timeThen: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'grantPermission(uint256,uint256)'(
    timeNow: BigNumberish,
    timeThen: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isConfirmed(transactionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  'isConfirmed(uint256)'(transactionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isGrantedPermission(overrides?: CallOverrides): Promise<boolean>;

  'isGrantedPermission()'(overrides?: CallOverrides): Promise<boolean>;

  isNominee(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'isNominee(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isOwnerDeceased(overrides?: CallOverrides): Promise<boolean>;

  'isOwnerDeceased()'(overrides?: CallOverrides): Promise<boolean>;

  nomineeMode(overrides?: CallOverrides): Promise<boolean>;

  'nomineeMode()'(overrides?: CallOverrides): Promise<boolean>;

  nominees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'nominees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  pendingConfirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'pendingConfirmations(uint256,address)'(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rejectTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'rejectTransaction(uint256)'(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeNominee(nominee: string, overrides?: Overrides): Promise<ContractTransaction>;

  'removeNominee(address)'(nominee: string, overrides?: Overrides): Promise<ContractTransaction>;

  replaceNominee(
    nominee: string,
    newNominee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'replaceNominee(address,address)'(
    nominee: string,
    newNominee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  'required()'(overrides?: CallOverrides): Promise<BigNumber>;

  requiredP(overrides?: CallOverrides): Promise<BigNumber>;

  'requiredP()'(overrides?: CallOverrides): Promise<BigNumber>;

  revokeConfirmation(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'revokeConfirmation(uint256)'(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitTransaction(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'submitTransaction(address,uint256,bytes)'(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  switchNomineeMode(t: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'switchNomineeMode(uint256)'(
    t: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  'totalVotes()'(overrides?: CallOverrides): Promise<BigNumber>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  'transactionCount()'(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    destination: string;
    value: BigNumber;
    timestamp: BigNumber;
    data: string;
    executed: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  'transactions(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    destination: string;
    value: BigNumber;
    timestamp: BigNumber;
    data: string;
    executed: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  transferOwnership(
    originalOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transferOwnership(address,address)'(
    originalOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voteMultiplier(arg0: string, overrides?: CallOverrides): Promise<number>;

  'voteMultiplier(address)'(arg0: string, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_OWNER_COUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    addNominee(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'addNominee(address,uint8)'(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    appointee(overrides?: CallOverrides): Promise<string>;

    'appointee()'(overrides?: CallOverrides): Promise<string>;

    changeMultiplier(a: string, m: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'changeMultiplier(address,uint8)'(
      a: string,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwnerToDeceased(overrides?: CallOverrides): Promise<void>;

    'changeOwnerToDeceased()'(overrides?: CallOverrides): Promise<void>;

    changeRequirement(_requiredP: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'changeRequirement(uint8)'(_requiredP: BigNumberish, overrides?: CallOverrides): Promise<void>;

    confirmTransaction(transactionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'confirmTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    'confirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositToken(overrides?: CallOverrides): Promise<void>;

    'depositToken()'(overrides?: CallOverrides): Promise<void>;

    executeTransaction(transactionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'executeTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getConfirmationCount(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(transactionId: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    'getConfirmations(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContractAddress(overrides?: CallOverrides): Promise<string>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<string>;

    getNominees(overrides?: CallOverrides): Promise<string[]>;

    'getNominees()'(overrides?: CallOverrides): Promise<string[]>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getTransactionCount(bool,bool)'(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    'getTransactionIds(uint256,uint256,bool,bool)'(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantPermission(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'grantPermission(uint256,uint256)'(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isConfirmed(transactionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'isConfirmed(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGrantedPermission(overrides?: CallOverrides): Promise<boolean>;

    'isGrantedPermission()'(overrides?: CallOverrides): Promise<boolean>;

    isNominee(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'isNominee(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isOwnerDeceased(overrides?: CallOverrides): Promise<boolean>;

    'isOwnerDeceased()'(overrides?: CallOverrides): Promise<boolean>;

    nomineeMode(overrides?: CallOverrides): Promise<boolean>;

    'nomineeMode()'(overrides?: CallOverrides): Promise<boolean>;

    nominees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'nominees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    pendingConfirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'pendingConfirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rejectTransaction(transactionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'rejectTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeNominee(nominee: string, overrides?: CallOverrides): Promise<void>;

    'removeNominee(address)'(nominee: string, overrides?: CallOverrides): Promise<void>;

    replaceNominee(nominee: string, newNominee: string, overrides?: CallOverrides): Promise<void>;

    'replaceNominee(address,address)'(
      nominee: string,
      newNominee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    'required()'(overrides?: CallOverrides): Promise<BigNumber>;

    requiredP(overrides?: CallOverrides): Promise<BigNumber>;

    'requiredP()'(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmation(transactionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'revokeConfirmation(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'submitTransaction(address,uint256,bytes)'(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    switchNomineeMode(t: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'switchNomineeMode(uint256)'(t: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    'totalVotes()'(overrides?: CallOverrides): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    'transactionCount()'(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      timestamp: BigNumber;
      data: string;
      executed: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    'transactions(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      timestamp: BigNumber;
      data: string;
      executed: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    transferOwnership(
      originalOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'transferOwnership(address,address)'(
      originalOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteMultiplier(arg0: string, overrides?: CallOverrides): Promise<number>;

    'voteMultiplier(address)'(arg0: string, overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    Approval(transaction: BigNumberish | null): EventFilter;

    Confirmation(sender: string | null, transactionId: BigNumberish | null): EventFilter;

    Deposit(sender: string | null, value: null): EventFilter;

    Execution(transactionId: BigNumberish | null): EventFilter;

    ExecutionFailure(transactionId: BigNumberish | null): EventFilter;

    NomineeAddition(nominee: string | null): EventFilter;

    NomineeModeChanged(sender: string | null, time: BigNumberish | null): EventFilter;

    NomineeRemoval(nominee: string | null): EventFilter;

    OwnershipTransffered(from: string | null, to: string | null): EventFilter;

    PermissionFailed(sender: string | null, time: BigNumberish | null): EventFilter;

    PermissionGranted(sender: string | null, time: BigNumberish | null): EventFilter;

    RequirementChange(requiredP: null): EventFilter;

    Revocation(sender: string | null, transactionId: BigNumberish | null): EventFilter;

    Submission(transactionId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_OWNER_COUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    addNominee(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'addNominee(address,uint8)'(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    appointee(overrides?: CallOverrides): Promise<BigNumber>;

    'appointee()'(overrides?: CallOverrides): Promise<BigNumber>;

    changeMultiplier(a: string, m: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'changeMultiplier(address,uint8)'(
      a: string,
      m: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeOwnerToDeceased(overrides?: Overrides): Promise<BigNumber>;

    'changeOwnerToDeceased()'(overrides?: Overrides): Promise<BigNumber>;

    changeRequirement(_requiredP: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'changeRequirement(uint8)'(_requiredP: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    confirmTransaction(transactionId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'confirmTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    confirmations(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'confirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToken(overrides?: PayableOverrides): Promise<BigNumber>;

    'depositToken()'(overrides?: PayableOverrides): Promise<BigNumber>;

    executeTransaction(transactionId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'executeTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getConfirmationCount(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(transactionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getConfirmations(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<BigNumber>;

    getNominees(overrides?: CallOverrides): Promise<BigNumber>;

    'getNominees()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getTransactionCount(bool,bool)'(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getTransactionIds(uint256,uint256,bool,bool)'(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPermission(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'grantPermission(uint256,uint256)'(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isConfirmed(transactionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'isConfirmed(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGrantedPermission(overrides?: CallOverrides): Promise<BigNumber>;

    'isGrantedPermission()'(overrides?: CallOverrides): Promise<BigNumber>;

    isNominee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isNominee(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOwnerDeceased(overrides?: CallOverrides): Promise<BigNumber>;

    'isOwnerDeceased()'(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeMode(overrides?: CallOverrides): Promise<BigNumber>;

    'nomineeMode()'(overrides?: CallOverrides): Promise<BigNumber>;

    nominees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'nominees(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    pendingConfirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'pendingConfirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectTransaction(transactionId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'rejectTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeNominee(nominee: string, overrides?: Overrides): Promise<BigNumber>;

    'removeNominee(address)'(nominee: string, overrides?: Overrides): Promise<BigNumber>;

    replaceNominee(nominee: string, newNominee: string, overrides?: Overrides): Promise<BigNumber>;

    'replaceNominee(address,address)'(
      nominee: string,
      newNominee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    'required()'(overrides?: CallOverrides): Promise<BigNumber>;

    requiredP(overrides?: CallOverrides): Promise<BigNumber>;

    'requiredP()'(overrides?: CallOverrides): Promise<BigNumber>;

    revokeConfirmation(transactionId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'revokeConfirmation(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'submitTransaction(address,uint256,bytes)'(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    switchNomineeMode(t: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'switchNomineeMode(uint256)'(t: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    'totalVotes()'(overrides?: CallOverrides): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    'transactionCount()'(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'transactions(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'transferOwnership(address,address)'(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    voteMultiplier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'voteMultiplier(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'MAX_OWNER_COUNT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNominee(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'addNominee(address,uint8)'(
      nominee: string,
      _voteMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    appointee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'appointee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMultiplier(
      a: string,
      m: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'changeMultiplier(address,uint8)'(
      a: string,
      m: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeOwnerToDeceased(overrides?: Overrides): Promise<PopulatedTransaction>;

    'changeOwnerToDeceased()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    changeRequirement(
      _requiredP: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'changeRequirement(uint8)'(
      _requiredP: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'confirmTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'confirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'depositToken()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'executeTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getConfirmationCount(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getConfirmations(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getContractAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNominees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getNominees()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getTransactionCount(bool,bool)'(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getTransactionIds(uint256,uint256,bool,bool)'(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPermission(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'grantPermission(uint256,uint256)'(
      timeNow: BigNumberish,
      timeThen: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isConfirmed(uint256)'(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGrantedPermission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isGrantedPermission()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNominee(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isNominee(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwnerDeceased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isOwnerDeceased()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nomineeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nomineeMode()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominees(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nominees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingConfirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'pendingConfirmations(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'rejectTransaction(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeNominee(nominee: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'removeNominee(address)'(nominee: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    replaceNominee(
      nominee: string,
      newNominee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'replaceNominee(address,address)'(
      nominee: string,
      newNominee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'required()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'requiredP()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'revokeConfirmation(uint256)'(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'submitTransaction(address,uint256,bytes)'(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    switchNomineeMode(t: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'switchNomineeMode(uint256)'(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalVotes()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'transactionCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'transactions(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address,address)'(
      originalOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voteMultiplier(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'voteMultiplier(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
